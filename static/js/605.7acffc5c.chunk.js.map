{"version":3,"file":"static/js/605.7acffc5c.chunk.js","mappings":"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","sources":["components/LoginForm/initialState.js","components/LoginForm/fields.js","webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","webpack://react-homework-template/./src/pages/LoginPage/LoginPage.module.css?f8e0","pages/LoginPage/LoginPage.jsx","webpack://react-homework-template/./src/shared/TextField/text-field.module.css?f539","shared/TextField/TextField.jsx","shared/hooks/useForm.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["const initialState = {\n    email: \"\",\n    password: \"\",\n}\n\nexport default initialState;","const fields = {\n  email: {\n    label: 'Email',\n    name: 'email',\n    type: 'email',\n    placeholder: 'Enter user email',\n    required: true,\n  },\n  password: {\n    label: 'Password',\n    name: 'password',\n    type: 'password',\n    placeholder: 'Enter user password (min 6 symbols)',\n    required: true,\n  },\n};\n\nexport default fields;\n","// extracted by mini-css-extract-plugin\nexport default {\"Form\":\"LoginForm_Form__WD3dS\",\"Section\":\"LoginForm_Section__dxiQ4\",\"Button\":\"LoginForm_Button__eFwye\",\"SubTitle\":\"LoginForm_SubTitle__fwhwk\",\"TextField\":\"LoginForm_TextField__DcZfc\"};","import { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport useForm from '../../shared/hooks/useForm';\nimport TextField from 'shared/TextField/TextField';\nimport initialState from './initialState';\nimport fields from './fields';\nimport css from './LoginForm.module.css';\nconst LoginForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n\n  const emailId = useMemo(() => nanoid(), []);\n  const passwordId = useMemo(() => nanoid(), []);\n\n  const { email, password } = state;\n\n  return (\n    <div className={css.Section}>\n      <form className={css.Form} onSubmit={handleSubmit}>\n        <h2 className={css.SubTitle}>Please, Log In</h2>\n        <TextField\n          id={emailId}\n          value={email}\n          className={css.TextField}\n          handleChange={handleChange}\n          {...fields.email}\n        />\n        <TextField\n          id={passwordId}\n          value={password}\n          className={css.TextField}\n          handleChange={handleChange}\n          {...fields.password}\n        />\n        <button className={css.Button}>Login</button>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n\nLoginForm.defaultProps = {\n  onSubmit: () => {},\n};\n\nLoginForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"LoginPage_Container__q8qjM\"};","import React from 'react';\nimport LoginForm from 'components/LoginForm/LoginForm';\nimport css from './LoginPage.module.css';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth/auth-operations';\nexport default function LoginPage() {\n  const dispatch = useDispatch();\n  const onLogin = data => {\n    dispatch(login(data));\n  };\n  return (\n    <div className={css.Container}>\n      <LoginForm onSubmit={onLogin} />\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"formGroup\":\"text-field_formGroup__5OJow\",\"field\":\"text-field_field__0xPaa\",\"fullClassName\":\"text-field_fullClassName__dM05-\",\"label\":\"text-field_label__CMPtS\"};","import PropTypes from 'prop-types';\n\nimport styles from './text-field.module.css';\n\nconst TextField = ({\n  id,\n  label,\n  value,\n  name,\n  handleChange,\n  type,\n  checked,\n  className,\n  placeholder,\n  required,\n  pattern,\n}) => {\n  const fullClassName = className\n    ? `${styles.field} ${className}`\n    : styles.field;\n\n  return (\n    <div className={styles.formGroup}>\n      {label && (\n        <label htmlFor={id} className={styles.label}>\n          {label}\n        </label>\n      )}\n      <input\n        id={id}\n        value={value}\n        checked={checked}\n        name={name}\n        onChange={handleChange}\n        type={type}\n        className={fullClassName}\n        placeholder={placeholder}\n        required={required}\n        pattern={pattern}\n      />\n    </div>\n  );\n};\n\nexport default TextField;\n\nTextField.defaultProps = {\n  type: 'text',\n  required: false,\n};\n\nTextField.propTypes = {\n  id: PropTypes.string,\n  label: PropTypes.string,\n  value: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  type: PropTypes.string,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  required: PropTypes.bool,\n  pattern: PropTypes.string,\n};\n","import { useState } from 'react';\n\nconst useForm = ({ initialState, onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = ({ target }) => {\n    const { value, name, type, checked } = target;\n    const newValue = type === 'checkbox' ? checked : value;\n    setState(prevState => ({\n      ...prevState,\n      [name]: newValue,\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n};\n\nexport default useForm;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["email","password","label","name","type","placeholder","required","LoginForm","onSubmit","useForm","initialState","state","handleChange","handleSubmit","emailId","useMemo","nanoid","passwordId","className","css","TextField","id","value","fields","defaultProps","LoginPage","dispatch","useDispatch","data","login","checked","pattern","fullClassName","styles","htmlFor","onChange","useState","setState","target","newValue","prevState","e","preventDefault","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}